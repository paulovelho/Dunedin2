<?php

namespace Magrathea2\Admin;

#######################################################################################
####
####    MAGRATHEA PHP2
####    v. 2.0
####    Magrathea by Paulo Henrique Martins
####    Platypus technology
####    created: 2023-10 by Paulo Martins (extracted from CodeManager)
####
#######################################################################################

use Magrathea2\Admin\Features\AppConfig\AppConfigControl;
use Magrathea2\Exceptions\MagratheaException;
use Magrathea2\MagratheaPHP;
use function Magrathea2\now;

/**
 * Class for code generations
 */
class CodeCreator extends \Magrathea2\Singleton { 

	public $namespace;
	public $structure;

	/**
	 * Gets the data that will be used to create the code
	 * @return array		array like [ "success", "data", "errors" ]
	 */
	public function GetCodeCreationData(): array {
		$rs = [];
		$success = true;
		$errors = [];
		$configControl = new AppConfigControl();
		$path = $configControl->GetValueByKey("code_path");
		if(empty($path)) $path = MagratheaPHP::Instance()->appRoot;
		$structure = $configControl->GetValueByKey("code_structure");
		if (empty($structure)) {
			$success = false;
			array_push($errors, "Structure Type is empty or invalid");
		}
		$namespace = $configControl->GetValueByKey("code_namespace");
		if (empty($namespace)) {
			$success = false;
			array_push($errors, "namespace is empty");
		}
		$rs = [
			"success" => $success,
			"data" => [
				"code-path" => $path,
				"code-structure" => $structure,
				"code-namespace" => $namespace,
			]
		];
		if(!$success) {
			$rs["errors"] = $errors;
		}
		return $rs;
	}

	/**
	 * Loads basic structure for code creation
	 */
	public function Load(): CodeCreator {
		$codeData = $this->GetCodeCreationData();
		if(!$codeData["success"]) {
			throw new MagratheaException("error generating code");
		}
		$data = $codeData["data"];
		$this->namespace = $data["code-namespace"];
		$this->structure = $data["code-structure"];
		return $this;
	}

	/**
	 * returns full object name with namespace
	 * @param string 	$obj 		object name
	 * @param bool 		$isBase	is base object we want?
	 * @return string 
	 */
	private function GetFullObjName($obj, $isBase=true): string {
		if($this->namespace) {
			$middle = ($this->structure == "mvc" ? "Models" : $obj);
			if($isBase) {
				return "\\".$this->namespace."\\".$middle."\\Base\\".$obj."Base";
			} else {
				return "\\".$this->namespace."\\".$middle."\\".$obj;
			}
		} else {
			return $obj;
		}
	}
	/**
	 * returns full object control base name with namespace
	 * @param string 	$obj 		object name
	 * @return string 
	 */
	private function GetFullControlBaseName($object): string {
		if($this->namespace) {
			$middle = ($this->structure == "mvc" ? "Controls" : $object);
			return "\\".$this->namespace."\\".$middle."\\Base\\".$object."ControlBase";
		} else {
			return $object."ControlBase";
		}
	}

	/**
	 * comment for the header of the file
	 * @return string
	 */
	private function GetCommentAlert(): string {
		$msg = "";
		$msg .= "## FILE GENERATED BY MAGRATHEA.\n";
		$msg .= "## This file was automatically generated and changes can be overwritten through the admin\n";
		$msg .= "## -- date of creation: [".now()."]\n";
		$msg .= "\n";
		return $msg;
	}

	private function GetNamespace($object, $isBase=false, $isControl=false): string {
		if ($this->namespace) {
			$base = $isBase ? "\\Base" : "";
			if($this->structure == "mvc") {
				$middle = $isControl ? "Controls" : "Models";
			} else {
				$middle = $object;
			}
			return $this->namespace."\\".$middle.$base;
		}
	}

	/**
	 * Generate Base Code for object
	 * @param 	string 		$object			object name
	 * @param 	array			$data				array with magrathea_conf data for object
	 * @return 	string		code
	 */
	public function GenerateBaseCodeForObject($object, $data) {
		if(empty($this->structure)) {
			throw new MagratheaException("Code creation not properly load");
		}
		$obj_fields = array();
		foreach($data as $key => $item){
			if( substr($key, -6) == "_alias" ){
				$field_name = substr($key, 0, -6);
				if( $field_name == "created_at" || $field_name == "updated_at" ) continue;
				array_push($obj_fields, $field_name);
			}
		}

		$relations = array();
		$relations = ObjectManager::Instance()->GetRelationsByObject($object);
		$relations_properties = "";
		$relations_functions = "";
		$relations_autoload = array();
		$autoload_objs = array();
		foreach($relations as $rel){
			$relations_properties .= "\t\t\$this->relations[\"properties\"][\"".$rel["rel_property"]."\"] = null;\n";
			$relations_properties .= "\t\t\$this->relations[\"methods\"][\"".$rel["rel_property"]."\"] = \"".$rel["rel_method"]."\";\n";
			$relations_properties .= "\t\t\$this->relations[\"lazyload\"][\"".$rel["rel_property"]."\"] = \"".($rel["rel_lazyload"] == 1 ? "true" : "false")."\";\n";
			
			$relations_functions .= "\tpublic function ".$rel["rel_method"]."(){\n";
			$relations_functions .= "\t\tif(\$this->relations[\"properties\"][\"".$rel["rel_property"]."\"] != null) return \$this->relations[\"properties\"][\"".$rel["rel_property"]."\"];\n";
			if( $rel["rel_type"] == "belongs_to" ) {
				$relations_functions .= "\t\t\$this->relations[\"properties\"][\"".$rel["rel_property"]."\"] = new ".$this->GetFullObjName($rel["rel_object"])."(\$this->".$rel["rel_field"].");\n";
				$relations_properties .= "\t\t\$this->relations[\"external\"][\"".$rel["rel_field"]."\"] = \"".$this->GetFullObjName($rel["rel_object"])."\";\n";
			} else if ( $rel["rel_type"] == "has_many" ) {
				$relations_functions .= "\t\t\$pk = \$this->dbPk;\n";
				$relations_functions .= "\t\t\$this->relations[\"properties\"][\"".$rel["rel_property"]."\"] = ".$this->GetFullControlBaseName($rel["rel_object"])."::GetWhere(array(\"".$rel["rel_field"]."\" => \$this->\$pk));\n";
			}
			$relations_functions .= "\t\treturn \$this->relations[\"properties\"][\"".$rel["rel_property"]."\"];\n";
			$relations_functions .= "\t}\n";

			if( $rel["rel_type"] == "belongs_to" ) {
				$obj_var = "\$".strtolower($rel["rel_property"]);
				$relations_functions .= "\tpublic function Set".$rel["rel_property"]."(".$obj_var."){\n";
				$relations_functions .= "\t\t\$this->relations[\"properties\"][\"".$rel["rel_property"]."\"] = ".$obj_var.";\n";
				$relations_functions .= "\t\t\$this->".$rel["rel_field"]." = ".$obj_var."->GetID();\n";
				$relations_functions .= "\t\treturn \$this;\n";
				$relations_functions .= "\t}\n";
			}

			if($rel["rel_autoload"] == 1){
				$obj = $rel["rel_property"];
				$relAuto = [
					"name" => $obj,
					"obj" => $this->GetFullObjName($obj),
					"field" => $rel["rel_field"],
				];
				$relations_autoload[$obj] = "\"".$obj."\" => [\"obj\" => \"".$relAuto["obj"]."\",\"field\" => \"".$relAuto["field"]."\"]";
				array_push($autoload_objs, $obj);
			}

		} // close foreach relations
	
		$code = "<?php\n";
		$code .= $this->GetCommentAlert();
		$code .= "namespace ".$this->GetNamespace($object, true).";\n\n";

		$code .= "use Magrathea2\iMagratheaModel;\n";
		$code .= "use Magrathea2\MagratheaModel;\n\n";


		$code .= "class ".$object."Base extends MagratheaModel implements iMagratheaModel {\n\n";
		
		$code .= "\tpublic \$".implode(", $", $obj_fields).";\n";
		$code .= "\tpublic \$created_at, \$updated_at;\n";
		$code .= "\tprotected \$autoload = ".(count($relations_autoload) == 0 ? "null" : "array(".implode(", ", $relations_autoload).")").";\n";
		if(count($autoload_objs) > 0) {
			$code .= "\tpublic \$".implode(", $", $autoload_objs).";\n";
		}
		$code .= "\n";

		$code .= "\tpublic function __construct( ".( ($data["db_pk"]) ? " \$".$data["db_pk"]."=0 " : "\$id=0" )." ){ \n";
		$code .= "\t\t\$this->MagratheaStart();\n";
		if($data["db_pk"]){
			$code .= "\t\tif( !empty(\$".$data["db_pk"].") ){\n";
			$code .= "\t\t\t\$pk = \$this->dbPk;\n";
			$code .= "\t\t\t\$this->\$pk = \$".$data["db_pk"].";\n";
			$code .= "\t\t\t\$this->GetById(\$".$data["db_pk"].");\n";
			$code .= "\t\t}\n";
		}
		$code .= "\t}\n";
		$code .= "\tpublic function MagratheaStart(){\n";
		$code .= "\t\t\$this->dbTable = \"".$data["table_name"]."\";\n";
		$code .= "\t\t\$this->dbPk = \"".$data["db_pk"]."\";\n";
		foreach($obj_fields as $f){
			$code .= "\t\t\$this->dbValues[\"".$f."\"] = \"".$data[$f."_type"]."\";\n";
			if( !empty($data[$f."_alias"]) )
				$code .= "\t\t\$this->dbAlias[\"".$data[$f."_alias"]."\"] = \"".$f."\";\n";
		}
		$code .= "\t\t\$this->dbValues[\"created_at\"] =  \"datetime\";\n";
		$code .= "\t\t\$this->dbValues[\"updated_at\"] =  \"datetime\";\n";			

		$code .= "\n".$relations_properties;
		$code .= "\n";
		$code .= "\t}\n";

		$code .= "\n\tpublic function GetControl() {";
		$code .= "\n\t\treturn new \\".$this->GetNamespace($object, true)."\\".$object."ControlBase();";
		$code .= "\n\t}";

		$code .= "\n\n\t// >>> relations:\n".$relations_functions."\n";

		$code .= "}\n";
		return $code;
	}

	/**
	 * Generate Base Code for object
	 * @param 	string 		$object			object name
	 * @param 	array			$data				array with magrathea_conf data for object
	 * @return 	string		code
	 */
	public function GenerateBaseCodeForObjectControl($object, $data) {
		if(empty($this->structure)) {
			throw new MagratheaException("Code creation not properly load");
		}
		$code = "<?php\n";
		$code .= $this->GetCommentAlert();
		$code .= "namespace ".$this->GetNamespace($object, true, true).";\n\n";

		$code .= "use Magrathea2\MagratheaModelControl;\n\n";

		$code .= "class ".$object."ControlBase extends MagratheaModelControl {\n";
			$code .= "\tprotected static \$modelNamespace = \"".$this->GetNamespace($object)."\";\n";
			$code .= "\tprotected static \$modelName = \"".$object."\";\n";
			$code .= "\tprotected static \$dbTable = \"".$data["table_name"]."\";\n";
		$code .= "}\n";
		return $code;
	}

	/**
	 * Generate Code for object
	 * @param 	string 		$object		object name
	 * @return 	string		code
	 */
	public function GenerateCodeForObject($object) {
		if(empty($this->structure)) {
			throw new MagratheaException("Code creation not properly load");
		}
		$code = "<?php\n";

		$code .= "namespace ".$this->GetNamespace($object).";\n\n";

		$code .= "class ".$object." extends ".$this->GetFullObjName($object, true)." {\n\n";
		$code .= "\tpublic function __construct(\$id=0){\n";
		$code .= "\t\tparent::__construct(\$id);\n";
		$code .= "\t}\n\n";
		$code .= "\t// model code goes here!\n";
		$code .= "}\n";
		return $code;
	}

	/**
	 * Generate Code for object
	 * @param 	string 		$object		object name
	 * @return 	string		code
	 */
	public function GenerateCodeForObjectControl($object) {
		if(empty($this->structure)) {
			throw new MagratheaException("Code creation not properly load");
		}
		$code = "<?php\n";

		$code .= "namespace ".$this->GetNamespace($object, false, true).";\n\n";

		$code .= "class ".$object."Control extends ".$this->GetFullControlBaseName($object)." {\n";
		$code .= "\t// model code goes here!\n";
		$code .= "}\n";
		return $code;
	}

	/**
	 * Generate Code for AdminCRUD
	 * @param 	string 		$object		object name
	 * @return 	string		code
	 */
	public function GenerateCodeForAdmin($object) {
		if(empty($this->structure)) {
			throw new MagratheaException("Code creation not properly load");
		}
		$code = "<?php\n";

		$code .= "namespace ".$this->GetNamespace($object, false, true).";\n\n";

		$code .= "class ".$object."Admin extends \Magrathea2\Admin\Features\CrudObject\AdminCrudObject {\n";
		$code .= "\tpublic string \$featureName = \"".$object." CRUD\";\n\n";
		$code .= "\tpublic function Initialize() {\n";
		$code .= "\t\t\$this->SetObject(new ".$object."());\n";
		$code .= "\t}\n";
		$code .= "}\n";
		return $code;
	}

	/**
	 * Generate Code for MagratheaAPI
	 * @param 	string 		$object		object name
	 * @return 	string		code
	 */
	public function GenerateCodeForApi($object) {
		if(empty($this->structure)) {
			throw new MagratheaException("Code creation not properly load");
		}
		$code = "<?php\n";

		$code .= "namespace ".$this->GetNamespace($object, false, true).";\n\n";

		$code .= "class ".$object."Api extends \Magrathea2\MagratheaApiControl {\n";
		$code .= "\tpublic function __construct() {\n";
		$code .= "\t\t\$this->model = get_class(new ".$object."());\n";
		$code .= "\t\t\$this->service = new ".$object."Control();\n";
		$code .= "\t}\n\n";
		$code .= "}\n";
		return $code;
	}



}
